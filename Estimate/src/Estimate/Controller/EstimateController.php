<?php		namespace Estimate\Controller;		use Zend\Mvc\Controller\AbstractActionController;	use Zend\View\Model\ViewModel;	use Estimate\Form\SenddataForm;		class EstimateController extends AbstractActionController	{		protected $answerTable;		protected $questionTable;		protected $datasetTable;		protected $maximumVal;				public function indexAction()		{			return new ViewModel();		}				public function estimateProcessAction()		{			$id=(int)$this->params()->fromRoute('id',0);			$dataAnswer=$this->getAnswerTable()->getDataset($id);			$dataMatch=$this->getMatching();			$dataSelectedByDataset=$this->getDatasetTable()->getDatasetBySpecialColumnsOrder($this->selectedIDSort($dataMatch));			$form=new SenddataForm($id);			return new ViewModel(array(				'form'=>$form,				'answer'=>$dataAnswer,				'sort'=>$this->sortData($dataMatch),				'datasetView'=>$dataSelectedByDataset,				'field'=>$this->getDatasetTable()->arrField,				'spesify'=>$this->getDatasetTable()->spesify,			));		}				public function adaptationprocessAction()		{						$id_dataset=(int)$this->params()->fromRoute('id',0);			$datasetTable=$this->getDatasetTable()->getDatasetByColumnsWithKey($id_dataset);			return new ViewModel(array('dataset'=>$datasetTable));		}				public function getMatching()		{			$id=(int)$this->params()->fromRoute('id',0);			$dataAnswer=$this->getAnswerTable()->getDataset($id);			$dataQuestion=$this->getQuestionTable()->getAbbreviation();			$dataset=$this->getDatasetTable()->getDatasetByColumns($dataQuestion);						for($i=0;$i<count($dataset);$i++){				$j=0;$jml=0;				foreach($dataset[$i] as $key=>$value){					if($key!="ID"){						$weight=$this->getWeight($key);						if($value==$dataAnswer[$j]){							$jml+=1*$weight;						}else{							$jml+=0*$weight;						}						$j++;					}				}				$arraySet[$dataset[$i]['ID']]=round(($jml/25)*100,2);			}			return $arraySet;		}				public function sortData($arr){			arsort($arr);			return $arr;		}				public function selectedIDSort($arr)		{			asort($arr);			$arrSelectID=array();			foreach($arr as $key=>$val){				if($val!=0){					$arrSelectID[]=$key;				}			}			return $arrSelectID;		}				public function getWeight($abbreviation)		{			switch($abbreviation){				case "IS":				$weight=1;				break;				case "OT":				$weight=1;				break;				case "AT":				$weight=5;				break;				case "DT":				$weight=5;				break;				case "DP":				$weight=3;				break;				case "LT":				$weight=1;				break;				case "PPL":				$weight=3;				break;				case "PET":				$weight=5;				break;				case "OS1":				$weight=1;				break;			}			return $weight;		}				public function getAnswerTable()		{			if(!$this->answerTable){				$sm=$this->getServiceLocator();				$this->answerTable=$sm->get('Estimate\Model\AnswerEstimateTable');			}			return $this->answerTable;		}				public function getQuestionTable()		{			if(!$this->questionTable){				$sm=$this->getServiceLocator();				$this->questionTable=$sm->get('Estimate\Model\QuestionEstimateTable');			}			return $this->questionTable;		}				public function getDatasetTable()		{			if(!$this->datasetTable){				$sm=$this->getServiceLocator();				$this->datasetTable=$sm->get('Estimate\Model\DatasetEstimateTable');			}			return $this->datasetTable;		}			}		?>