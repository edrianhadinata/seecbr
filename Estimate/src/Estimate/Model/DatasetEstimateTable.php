<?php	namespace Estimate\Model;		use Zend\Db\TableGateway\TableGateway;	use Zend\Db\Sql\Expression;			class DatasetEstimateTable 	{		protected $tableGateway;		public $arrField=array("ID","FS","N_effort","MTS","N_PDR","SDR","PET","E_Plan"," E_Specify","E_Design","E_Build","E_Test","E_Implement");				public $arrFieldEstimateView=array("ID Dataset"=>"ID","Industry Sector"=>"IS","Type of Organisation"=>"OT","Type of Application"=>"AT","Type of Development"=>"DT","Primary development platform"=>"DP","Generation of language type"=>"LT","Primary language"=>"PPL","Primary technology operating system"=>"OS1","Functional Size"=>"FS","Normalised Work Effort"=>"N_effort","Summary Work Effort"=>"S_effort","Normalised Productivity Delivery Rate"=>"N_PDR","Speed of Delivery Rate"=>"SDR","Project Elapsed Time"=>"PET","Max Team Size"=>"MTS","Effort of Plan"=>"E_Plan","Effort of Specify"=>"E_Specify","Effort of Design"=>"E_Design","Effort of Build"=>"E_Build","Effort of Test"=>"E_Test","Effort of Implement"=>"E_Implement");				public $spesify=array("Industry sector","Type of organisation","Type of application","Type of development","Primary development platform","Generation of language type","Primary language","Elapsed Time","Primary technology operating system");				protected $datasetFieldRecord=array('ID'=>'ID_Dataset','IS'=>'Industry_sector','OT'=>'Type_of_organisation','AT'=>'Type_of_application','DT'=>'Type_of_development','DP'=>'Primary_development_platform','LT'=>'Generation_of_language_type','PPL'=>'Primary_language','PET'=>'Elapsed_Time','OS1'=>'Primary_technology_operating_system','N_PDR'=>'Total_Unadjusted_Function_Points','FS'=>'Total_Adjusted_Function_Point','N_effort'=>'Project_Work_Effort','PET'=>'Project_Duration','SDR'=>'Speed_of_Delivery');				protected $datasetField=array('ID','Data_Quality','UFP','Year','IS','OT','AG','AT','DT','DP','LT','PPL','CA','FS','RS','N_effort_level1','N_effort','S_effort','N_PDR1','N_PDR','SDR','PET','PIT','I_Date','PAS','E_Plan','E_Specify','E_Design','E_Build','E_Test','E_Implement','E_Unrecorded','Recording_Method','Resource_Level','TSG','MTS','ATS','R_PWE_NPA','CASE_Tool','UM','HMA','Hardware1','Language1','OS1','IDE','DT1','DBS1','CS1','WS1','MS1','OP1','Dev_Methodologies','Dev_Techniques','JAD_Method','PMU','FPS','FPSA','Architecture','Client_Server','Client_Roles','Server_Roles','TOS','CS_Description','DBMS_Used','Upper_CASE_Used','Other_CASE_Tools','Other_CASE_Tool_Names','MIN_Defects','MAJ_Defects','X_Defects','TOT_Defects','P_Defects','S_Defects','D_Defects','MIN_B_Defects','MAJ_B_Defects','X_B_Defects','TOT_B_Defects','MIN_T_Defects','MAJ_T_Defects','X_T_Defects','TOT_T_Defects','MIN_I_Defects','MAJ_I_Defects','X_I_Defects','TOT_I_Defects');						public function __construct(TableGateway $dbTable)		{			$this->tableGateway=$dbTable;		}				public function getDataset($id)		{			$id=(int) $id;			$rowset=$this->tableGateway->select(array('ID'=>$id));			$row=$rowset->current();			if(!$row){				throw new \Exception("Tidak Menemukan Data yang dicari berdasarkan ID");			}			return $row;		}				public function getDatasetByColumns($arr)		{			$rowset=$this->tableGateway->getSql()->select();			$row=$rowset->columns($arr);			$resultSet=$this->tableGateway->selectWith($row);			if(!$resultSet){				throw new \Exception("Tidak Menemukan Data yang dicari berdasarkan abbreviation");			}			$value=array();			foreach($resultSet as $data){				foreach($data as $val){					$value[]=$val;				}			}			return $value;		}				public function getDatasetByColumnsWithKey($id)		{			$rowset=$this->tableGateway->getSql()->select()->where(array('ID'=>$id));			$row=$rowset->columns($this->arrFieldEstimateView);			$resultSet=$this->tableGateway->selectWith($row);			if(!$resultSet){				throw new \Exception("Tidak Menemukan Data yang dicari berdasarkan abbreviation");			}			$value=array();			foreach($resultSet as $data){				foreach($data as $nilai){					$value[]=$nilai;				}			}						return $value;		}				public function getMaximumId()		{			$val=max($this->getDatasetByColumns(array('ID')));			return $val;		}				public function getDatasetBySpecialColumnsOrder($arrID)		{						$arrIDImp=implode(',',$arrID);			$rowset=$this->tableGateway->getSql()->select();			$row2=$rowset->columns($this->arrField);			$row=$row2->order(array(new Expression('FIELD(ID,'.$arrIDImp.') desc')));			$resultSet=$this->tableGateway->selectWith($row);			if(!$resultSet){				throw new \Exception("Tidak Menemukan Data yang dicari");			}			$value=array();			foreach($resultSet as $data){				foreach($data as $val){					$value[]=$val;				}			}			return $value;		}				public function setSavetoDataset($arrDatasave)		{			$data_form=array();			foreach($this->datasetFieldRecord as $key=>$val){				if(isset($arrDatasave[$val])){					$data_form[$key]=$arrDatasave[$val];				}			}			foreach($this->datasetField as $val){				if(!isset($data_form[$val])){					if($val=='Year'){						$recToDataset[$val]=date('Y');					}else{						$recToDataset[$val]='?';					}				}else{					$recToDataset[$val]=$data_form[$val];				}			}			//return $recToDataset;						$id=(int)$recToDataset['ID'];			if($id!=0){				$this->tableGateway->insert($recToDataset);			}else{				throw new \Exception('Dataset ID doesn\'t not exist');			}					}			}		?>