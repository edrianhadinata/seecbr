<?php	namespace Fpcalculation\Form;		use Zend\Form\Form;		class FpcalculationForm extends Form	{		public $dataUnadjustedFPDesc=array('input','outputs','queries','files','program-interface');		public $dataUnadjustedFPCriteria=array('low','medium','high');		public $dataMultiplication=array(array(3,4,6),array(4,5,7),array(3,4,6),array(7,10,15),array(5,7,10));		public $dataDescList=array('Input','Outputs','Queries/Search-View','Files/Table-Database','Program Interface');		public $dataCategorySystemComplexity=array('Data Comunication','Heavy Use Configuration','Transaction Rate','End User Efficiency','Complex Processing','Instalation Ease','Multiple Sites','Performance','Distributed Function','On-Line Data Entry','On-Line Update','Reusability','Operational Ease','Extensibility');		public $dataEstimationCategories=array('Total Unadjusted Function Points','Processing Complexity','Adjusted Processing Complexity','Total Adjusted Function Point');		public $dataEffortCategories=array('Project Work Effort','Project Duration','Speed of Delivery');		public $dataEffortCategoriesMeasure=array('Hours','Months','FP/Month');		public $spesify=array("Industry sector","Type of organisation","Type of application","Type of development","Primary development platform","Generation of language type","Primary language","Elapsed Time","Primary technology operating system");				public function __construct($changeForm,$name=null)		{			parent::__construct($changeForm);						if($changeForm=='UnadjustedFunctionPoint'){				$this->getUnadjustedFunctionPoint();			}						if($changeForm=='SystemComplexity'){				$this->getSystemComplexity();			}						if($changeForm=='EffortEstimation'){				$this->getEffortEstimation();			}		}				public function getUnadjustedFunctionPoint()		{			$this->add(array(				'name'=>'id',				'type'=>'hidden',			));						foreach($this->dataUnadjustedFPDesc as $desc){				foreach($this->dataUnadjustedFPCriteria as $cri){					$this->add(array(						'name'=>$desc.'_'.$cri,						'type'=>'text',						'attributes'=>array(							'class'=>'form-control'						),					));				}			}						$this->add(array(				'name'=>'submit',				'type'=>'submit',				'attributes'=>array(					'value'=>'Calculate',					'id'=>'CalculateButton',					'class'=>'btn btn-success btn-md',				),			));						$this->add(array(				'name'=>'reset',				'type'=>'button',				'attributes'=>array(					'value'=>'Reset',					'id'=>'ResetButton',					'class'=>'btn btn-warning btn-md',				),			));		}				public function getSystemComplexity()		{			$this->add(array(				'name'=>'id',				'type'=>'hidden',			));												for($i=0;$i<count($this->dataCategorySystemComplexity);$i++){				$this->add(array(					'name'=>'sc_'.$i.'',					'type'=>'select',					'attributes'=>array(						'id'=>'sc_'.$i.'',						'class'=>'form-control'					),					'options'=>array(						'empty_option'=>'-Choose Options-',						'value_options'=>$this->getValueOp(),					),				));			}						$this->add(array(				'name'=>'submit',				'type'=>'submit',				'attributes'=>array(					'value'=>'Process',					'id'=>'CalculateButton',					'class'=>'btn btn-success btn-md',				),			));						$this->add(array(				'name'=>'reset',				'type'=>'button',				'attributes'=>array(					'value'=>'Reset',					'id'=>'ResetButton',					'class'=>'btn btn-warning btn-md',				),			));					}				public function getEffortEstimation()		{			$this->add(array(				'name'=>'id',				'type'=>'hidden',			));						$this->add(array(				'name'=>'submit',				'type'=>'submit',				'attributes'=>array(					'value'=>'Save into dataset',					'id'=>'SaveDataset',					'class'=>'btn btn-success btn-md',				),			));		}				public function getValueOp()		{			for($i=1;$i<=3;$i++){				$dt[$i]=$i;			}			return $dt;		}			}		?>